use std::iter::Iterator;

/// Dtrace ustack output parser.
pub mod dtrace;

/// A single stack trace, including the stack and count.
pub struct Trace {
    /// The stack for this trace.
    pub stack: Vec<String>,
    /// The count ow hoften this stack was seen before being emitted.
    pub count: u64,
}

/// Iterator over stack traces generated by a parser.
pub struct TraceIterator<P>
where
    P: Parse,
{
    parser: P,
}

impl<P> TraceIterator<P>
where
    P: Parse,
{
    /// Creates a new iterator from a provided parser
    pub fn new(parser: P) -> Self {
        Self { parser }
    }
}

impl<P> Iterator for TraceIterator<P>
where
    P: Parse,
{
    type Item = Trace;
    fn next(&mut self) -> Option<Self::Item> {
        self.parser.next()
    }
}

/// A parser that reutrns stack items for a given
/// representation.
pub trait Parse: Sized {
    /// Read the next trace.
    fn next(&mut self) -> Option<Trace>;
}
